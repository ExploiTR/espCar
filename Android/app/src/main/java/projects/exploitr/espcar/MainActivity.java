package projects.exploitr.espcar;

import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.WindowManager;
import android.widget.ImageView;
import android.widget.Switch;
import android.widget.Toast;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Locale;
import java.util.concurrent.TimeoutException;

public class MainActivity extends AppCompatActivity implements SensorEventListener {

    private static final String CMD = "%d,%d,%d,%d";
    /*
     * Format :
     * First Digit : if 1 move front, if 0 move back or 21
     * Second Digit : if 1 move right, if 0 move left or 21
     * Third Digit : Front PWM Value
     * Fourth Digit : Back PWM Value
     * */
    private SensorManager sensorManager;
    private Switch incr_accl;
    private ImageView status;
    private Handler cmdHandler_1;
    private Runnable cmdRunner_1;
    private WifiManager man;
    private ConnectivityManager connManager;
    private NetworkInfo mWifi;
    private int verticalPwm = 1023, horizontalPwm = 1023;
    private boolean isConnected = false;
    private boolean checkStarted = false;
    private Socket socket;
    private ImageView wheel;
    private int enVerticalDir = 21, enHorizonDir = 21, enLed = 21, enStart = 0;
    private Handler accl_handler;
    private Runnable accl_runner;
    private PrintWriter writer;

    @SuppressLint("ClickableViewAccessibility")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN);

        setContentView(R.layout.activity_main);

        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        toolbar.setTitleTextColor(Color.parseColor("#ffffff"));

        sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);
        incr_accl = findViewById(R.id.incr_accl);

        UselessButton up = findViewById(R.id.top);
        UselessButton down = findViewById(R.id.bottom);

        status = findViewById(R.id.status);
        wheel = findViewById(R.id.wheel);

        wheel.setEnabled(false);

        man = (WifiManager) getApplicationContext().getSystemService(WIFI_SERVICE);
        connManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);

        findViewById(R.id.fab).setOnClickListener(view -> {
            enStart = (enStart == 0 ? 1 : 0);
            if(enStart==0)
                Toast.makeText(this, "Engine Off", Toast.LENGTH_SHORT).show();
            else
                Toast.makeText(this, "Engine On", Toast.LENGTH_SHORT).show();
        });

        //<editor-fold desc="left r8 redundant code">
/*		left.setOnTouchListener((v, event) -> {
			if (event.getAction() == MotionEvent.ACTION_DOWN) {
				enLeft = 1;
				enRight = 0;
				v.setPressed(true);
				return true;
			} else if (event.getAction() == MotionEvent.ACTION_UP) {
				enLeft = 0;
				v.setPressed(false);
				v.performClick();
				return false;
			} else {
				return false;
			}
		});
		
		right.setOnTouchListener((v, event) -> {
			if (event.getAction() == MotionEvent.ACTION_DOWN) {
				enLeft = 0;
				enRight = 1;
				v.setPressed(true);
				return true;
			} else if (event.getAction() == MotionEvent.ACTION_UP) {
				enRight = 0;
				v.setPressed(false);
				v.performClick();
				return false;
			} else {
				return false;
			}
		});*/
        //</editor-fold>

        accl_handler = new Handler();
        accl_runner = new Runnable() {
            @Override
            public void run() {
                verticalPwm += 25;
                if (verticalPwm >= 1023) {
                    verticalPwm = 1023;
                }
                accl_handler.postDelayed(this, 100);
            }
        };

        up.setOnTouchListener((v, event) -> {
            if (event.getAction() == MotionEvent.ACTION_DOWN) {
                enVerticalDir = 1;
                if (incr_accl.isChecked()) {
                    verticalPwm = 0;
                    accl_handler.post(accl_runner);
                } else {
                    verticalPwm = 1023;
                }
                v.setPressed(true);
                return true;
            } else if (event.getAction() == MotionEvent.ACTION_UP) {
                verticalPwm = 1023;
                accl_handler.removeCallbacks(accl_runner);
                enVerticalDir = 21;
                v.performClick();
                v.setPressed(false);
                return false;
            }
            //    sendData();
            return false;
        });

        down.setOnTouchListener((v, event) -> {
            if (event.getAction() == MotionEvent.ACTION_DOWN) {
                enVerticalDir = 0;
                v.setPressed(true);
                return true;
            } else if (event.getAction() == MotionEvent.ACTION_UP) {
                enVerticalDir = 21;
                v.performClick();
                v.setPressed(false);
                return false;
            }
            return false;
        });

        cmdHandler_1 = new Handler();
        cmdRunner_1 = new Runnable() {
            @Override
            public void run() {
                mWifi = connManager.getActiveNetworkInfo();
                if (!checkStarted) {
                    AsyncTask.execute(() -> startStatusCheck());
                }
                if (!MainActivity.this.isFinishing()) {
                    cmdHandler_1.postDelayed(this, 250);
                }
                if (enStart == 1)
                    sendData();
            }
        };
        cmdHandler_1.post(cmdRunner_1);

    }

    private void sendData() {
        if (isConnected) {
            AsyncTask.execute(() -> {
                String command = String.format(Locale.US, CMD, enVerticalDir, enHorizonDir, verticalPwm, horizontalPwm);
                System.out.println(command);
                writer.println(command);
            });
        }
    }

    private void startStatusCheck() {
        if (man.isWifiEnabled()) {
            if (mWifi != null) {
                if (mWifi.isConnected()) {
                    startInternalCheck();
                    checkStarted = true;
                } else {
                    checkStarted = false;
                }
            }
        } else {
            runOnUiThread(() -> {
                status.setImageResource(R.drawable.status_server_disconnected);
                checkStarted = false;
            });
        }
    }

    private void startInternalCheck() {
        try {
            if (Pinger.isConnected("192.168.4.1", 1)) {
                if (!isConnected) {
                    runOnUiThread(() -> status.setImageResource(R.drawable.status_server_connecting));
                    tryToConnect();
                }
            } else {
                runOnUiThread(() -> status.setImageResource(R.drawable.status_server_disconnected));
                checkStarted = false;
            }
        } catch (IOException | InterruptedException | TimeoutException e) {
            e.printStackTrace();
            runOnUiThread(() -> status.setImageResource(R.drawable.status_server_disconnected));
            checkStarted = false;
        }
    }

    private void tryToConnect() {
        boolean isOkToConnect2 = false;
        try {
            socket = new Socket("192.168.4.1", 5555);
            socket.setKeepAlive(true);
            isOkToConnect2 = true;
        } catch (IOException e) {
            e.printStackTrace();
            runOnUiThread(() -> status.setImageResource(R.drawable.status_server_disconnected));
            checkStarted = false;
        }
        if (isOkToConnect2) {
            try {
                writer = new PrintWriter(socket.getOutputStream(), true);
                isConnected = true;
                runOnUiThread(() -> status.setImageResource(R.drawable.status_server_connected));
            } catch (IOException e) {
                runOnUiThread(() -> status.setImageResource(R.drawable.status_server_disconnected));
                e.printStackTrace();
                isConnected = false;
                checkStarted = false;
            }
        }
    }

    /*
     * The accelerometer should be deactivated
     * onPause and activated onResume to save resources (CPU, Battery). */
    @Override
    protected void onResume() {
        super.onResume();
        sensorManager.registerListener(this,
                sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER),
                SensorManager.SENSOR_DELAY_UI);
    }

    @Override
    protected void onPause() {
        sensorManager.unregisterListener(this);
        super.onPause();
    }

    @Override
    protected void onDestroy() {
        try {
            cmdHandler_1.removeCallbacks(cmdRunner_1);
            socket.close();
        } catch (Exception ignored) {
        }
        super.onDestroy();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        checkStarted = false;
        return true;
    }

    @Override
    public void onSensorChanged(SensorEvent event) {
        if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {
            float y = event.values[1];
            if (y > 10) {
                y = 10;
            } else if (y < -10) {
                y = -10;
            }
            int localHzPwm = (int) map(y, -10, 10, 0, 1023);
            if (localHzPwm < 450) {
                enHorizonDir = 0;
                horizontalPwm = 1023 - localHzPwm;
            } else if (localHzPwm > 600) {
                enHorizonDir = 1;
                horizontalPwm = localHzPwm;
            } else {
                enHorizonDir = 21;
            }
            wheel.setRotation((float) map(y, -10.0, 10.0, -60.0, 60.0));
        }
    }

    @Override
    public void onAccuracyChanged(Sensor sensor, int accuracy) {

    }

    @SuppressWarnings("SameParameterValue")
    double map(double y, double in_min, double in_max, double out_min, double out_max) {
        return (y - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    }
}
