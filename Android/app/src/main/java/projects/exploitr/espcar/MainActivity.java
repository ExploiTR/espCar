package projects.exploitr.espcar;

import android.content.Context;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.os.Handler;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.WindowManager;
import android.widget.ImageView;
import android.widget.SeekBar;
import android.widget.Switch;
import android.widget.TextView;
import android.widget.Toast;

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.math.RoundingMode;
import java.net.Socket;
import java.text.DecimalFormat;
import java.util.Locale;
import java.util.concurrent.TimeoutException;

public class MainActivity extends AppCompatActivity implements SensorEventListener, SeekBar.OnSeekBarChangeListener {

    private static final String CMD = "%s,%s,%s,%d";
    SensorManager sensorManager;
    VSeekBar pwmIn;
    UselessButton left, right, up, down;
    Switch sensorToggle;
    ImageView status;
    Handler h, h1;
    Runnable r, r1;
    TextView pwmView;
    WifiManager man;
    ConnectivityManager connManager;
    NetworkInfo mWifi;
    double x = 0d, y = 0d, z = 0d;
    int currentPwm = 0;
    boolean isOkToConnect = false, isConnected = false, isOkToConnect2 = false, checkStarted = false;
    Socket socket;
    OutputStream out;

    int enLed = 0, enLeft = 0, enRight = 0, enFront = 0, enBack = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN);

        setContentView(R.layout.activity_main);

        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        toolbar.setTitleTextColor(Color.parseColor("#ffffff"));

        sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);
        pwmIn = findViewById(R.id.pwmin);
        left = findViewById(R.id.left);
        right = findViewById(R.id.right);
        up = findViewById(R.id.top);
        down = findViewById(R.id.bottom);
        status = findViewById(R.id.status);
        sensorToggle = findViewById(R.id.sensor);
        pwmView = findViewById(R.id.pwmView);

        pwmIn.setOnSeekBarChangeListener(this);

        man = (WifiManager) getApplicationContext().getSystemService(WIFI_SERVICE);
        connManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);

        findViewById(R.id.fab).setOnClickListener(view -> {
            if (enLed == 0) {
                enLed = 1;
            } else {
                enLed = 0;
            }
            Toast.makeText(this, "You need to make led feature server-side. Modify code to remove this toast", Toast.LENGTH_SHORT).show();
        });

        left.setOnTouchListener((v, event) -> {
            if (event.getAction() == MotionEvent.ACTION_DOWN) {
                enLeft = 1;
                enRight = 0;
                v.setPressed(true);
                return true;
            } else if (event.getAction() == MotionEvent.ACTION_UP) {
                enLeft = 0;
                v.setPressed(false);
                v.performClick();
                return false;
            } else {
                return false;
            }
        });

        right.setOnTouchListener((v, event) -> {
            if (event.getAction() == MotionEvent.ACTION_DOWN) {
                enLeft = 0;
                enRight = 1;
                v.setPressed(true);
                return true;
            } else if (event.getAction() == MotionEvent.ACTION_UP) {
                enRight = 0;
                v.setPressed(false);
                v.performClick();
                return false;
            } else {
                return false;
            }
        });

        up.setOnTouchListener((v, event) -> {
            if (event.getAction() == MotionEvent.ACTION_DOWN) {
                enFront = 1;
                enBack = 0;
                v.setPressed(true);
                return true;
            } else if (event.getAction() == MotionEvent.ACTION_UP) {
                enFront = 0;
                v.performClick();
                v.setPressed(false);
                return false;
            } else {
                return false;
            }
        });

        down.setOnTouchListener((v, event) -> {
            if (event.getAction() == MotionEvent.ACTION_DOWN) {
                enFront = 0;
                enBack = 1;
                v.setPressed(true);
                return true;
            } else if (event.getAction() == MotionEvent.ACTION_UP) {
                enBack = 0;
                v.performClick();
                v.setPressed(false);
                return false;
            } else {
                return false;
            }
        });

        sensorToggle.setOnCheckedChangeListener((buttonView, isChecked)
                -> Toast.makeText(MainActivity.this, "Currently under work", Toast.LENGTH_SHORT).show());

        h = new Handler();
        r = new Runnable() {
            @Override
            public void run() {
                mWifi = connManager.getActiveNetworkInfo();
                if (!checkStarted) {
                    startStatusCheck();
                }
                Log.v("chk", String.valueOf(checkStarted));
                if (!MainActivity.this.isFinishing()) {
                    h.postDelayed(this, 500);
                }
            }
        };
        h.post(r);
        h1 = new Handler();
        r1 = new Runnable() {
            @Override
            public void run() {
                String dir, dir2;
                if (enRight == 1 && enLeft == 0) {
                    dir = "right";
                } else if (enRight == 0 && enLeft == 1) {
                    dir = "left";
                } else {
                    dir = "invalid";
                }

                if (enFront == 1 && enBack == 0) {
                    dir2 = "front";
                } else if (enFront == 0 && enBack == 1) {
                    dir2 = "back";
                } else {
                    dir2 = "invalid";
                }
                String boo = String.format(Locale.US, CMD,
                        dir,
                        dir2,
                        enLed == 1 ? "on" : "off",//TODO implement lights
                        currentPwm);
                Log.v("-_-", boo);
                if (isConnected) {
                    PrintWriter writer = new PrintWriter(out, true);
                    writer.println(String.format(Locale.US, boo, currentPwm));
                }
                h1.postDelayed(this, 125);
            }
        };
        h1.post(r1);
    }

    private void startStatusCheck() {
        if (man.isWifiEnabled()) {
            if (mWifi != null) {
                if (mWifi.isConnected()) {
                    startInternalCheck();
                    checkStarted = true;
                } else {
                    checkStarted = false;
                }
            }
        } else {
            status.setImageResource(R.drawable.isconnectedx);
            checkStarted = false;
        }
    }

    private void startInternalCheck() {
        try {
            if (Pinger.isConnected("192.168.4.1", 2)) {
                if (!isConnected) {
                    status.setImageResource(R.drawable.isconnecting);
                    isOkToConnect = true;
                    tryToConnect();
                }
            } else {
                isOkToConnect = false;
                status.setImageResource(R.drawable.isconnectedx);
                checkStarted = false;
            }
        } catch (IOException | InterruptedException | TimeoutException e) {
            e.printStackTrace();
            isOkToConnect = false;
            status.setImageResource(R.drawable.isconnectedx);
            checkStarted = false;
        }
    }

    private void tryToConnect() {
        try {
            socket = new Socket("192.168.4.1", 5555);
            socket.setKeepAlive(true);
            isOkToConnect2 = true;
        } catch (IOException e) {
            isOkToConnect2 = false;
            e.printStackTrace();
            checkStarted = false;
        }
        if (isOkToConnect2) {
            try {
                out = socket.getOutputStream();
                isConnected = true;
                status.setImageResource(R.drawable.isconnected);
            } catch (IOException e) {
                e.printStackTrace();
                isConnected = false;
                checkStarted = false;
            }
        } else {
            isOkToConnect = false;
        }
    }

    /*
     * The accelerometer should be deactivated
     * onPause and activated onResume to save resources (CPU, Battery). */
    @Override
    protected void onResume() {
        super.onResume();
        sensorManager.registerListener(this,
                sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER),
                SensorManager.SENSOR_DELAY_UI);
    }

    @Override
    protected void onPause() {
        sensorManager.unregisterListener(this);
        super.onPause();
    }

    @Override
    protected void onDestroy() {
        try {
            h.removeCallbacks(r);
            socket.close();
        } catch (Exception ignored) {
        }
        super.onDestroy();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        checkStarted = false;
        return true;
    }

    @Override
    public void onSensorChanged(SensorEvent event) {
        //TODO
        if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {
            x = event.values[0];
            y = event.values[1];
            z = event.values[2];
            x = Math.sqrt(x);
            y = Math.sqrt(y);
            z = Math.sqrt(z);
            DecimalFormat df = new DecimalFormat("#.##");
            df.setRoundingMode(RoundingMode.CEILING);
            Log.v("sns", "X:" + df.format(x) + " Y:" + df.format(y) + " Z:" + df.format(z));
        }
    }

    @Override
    public void onAccuracyChanged(Sensor sensor, int accuracy) {

    }

    /*well*/
    @Override
    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
        currentPwm = progress;
        pwmView.setText(String.format(Locale.US, "PWM IN : %d", progress));
    }

    @Override
    public void onStartTrackingTouch(SeekBar seekBar) {

    }

    @Override
    public void onStopTrackingTouch(SeekBar seekBar) {

    }

    @SuppressWarnings("SameParameterValue")
    long map(long x, long in_min, long in_max, long out_min, long out_max) {
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    }
}
